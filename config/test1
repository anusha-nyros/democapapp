namespace :deploy do

desc "Starting Heroku application"
task :configure do
  on roles(:web) do
	puts "heroku starting"
	servers = roles(:all) 
    	servers.each do |server| 
	if "#{server}" == "heroku.com" 
		set :default_env, {path: 'git@heroku.com:democapapp.git'}
		puts "#{fetch(:default_env)}"
	else
		set :default_env, { rvm_bin_path: '~/.rvm/' }
		puts "#{fetch(:default_env)}"
	end	
	end
#	execute :rake, "assets:precompile RAILS_ENV=#{fetch{rails_env}}"
  end
end  

 #before "deploy:starting", "deploy:configure"
#before "rvm:check", "deploy:configure"
desc "Renaming Heroku application"
task :rename do
  on roles(:all) do
	puts "renaming application"
	
  end
end

desc "Pushing to Heroku "
task :push do
  on roles(:all) do
	puts "Pushing heroku application"
	puts `git push -f git@heroku.com:#{fetch(:application)}.git master`
  end
end
#after "deploy:started", "deploy:rename"
after "deploy:started", "deploy:push"
  desc 'Restart application'
  task :restart do
     on roles(:app), in: :sequence, wait: 5 do
      # Your restart mechanism here, for example:
	puts "Deployed successfully"
      #execute "touch #{release_path}/tmp/restart.txt"
     # execute "touch #{current_path}/tmp/thin.pid"
	#execute :bundle, "exec thin restart -p 2003 -d -e RAILS_ENV=#{fetch(:rails_env)}"
    end
  end

  desc 'migrate application'
  task :heroku_migrate do
    on roles(:all), in: :sequence, wait: 5 do
	puts "Migration started"
      puts `heroku rake db:migrate --app #{fetch(:application)}`
    end
  end


desc "Heroku running"
task :heroku_start do
	on roles(:all) do
		puts "heroku starting"
		puts `heroku open`
 	end
end
after :publishing, :heroku_start

 desc "Linking Database.yml file"
 task :symlink do
    on roles(:app) do
     execute "ln -nfs #{shared_path}/config/database.yml #{release_path}/config/"
    end
 end
desc "Setting Database configuration"
 task :generate_yml do
	puts "sfshfsdad"
	on roles(:app) do
		
		#File.write('', "#{db_config}")
		execute "mkdir -p #{shared_path}/config"
		#upload! db_config, "#{shared_path}/config/database.yml"
		#put config.result(binding), "#{shared_path}/config/database.yml"
		#execute "File.open('#{shared_path}/config/database.yml', 'w') { |file| file.write('#{db_config}') }"
		#execute "File.write('#{shared_path}/config/database.yml','#{db_config}')"
		puts "#{db_config}"
		template = File.expand_path('../database.yml', __FILE__)
		upload! "#{template}", "#{shared_path}/config/database.yml"
puts "sfhsgdfjsgdfj"
	end
end
desc 'Runs rake db:create'
    task :create => [:set_rails_env] do
      on primary fetch(:migration_role) do
        within release_path do
          with rails_env: fetch(:rails_env) do
            execute :rake, "db:create RAILS_ENV=#{fetch(:rails_env)}"
          end
        end
      end
    end
before "deploy:migrate", :generate_yml
before "deploy:migrate", :symlink 
before "deploy:migrate", :create
before "deploy:migrate", "deploy:heroku_migrate" 
  after :publishing, :restart

  after :restart, :clear_cache do
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      # within release_path do
      #   execute :rake, 'cache:clear'
      # end
    end
  end

end
